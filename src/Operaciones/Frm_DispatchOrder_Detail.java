/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Operaciones;

import Model.Client;
import Model.DispatchOrder;
import Model.LocationCell;
import Model.LocationCellDetail;
import Model.Log;
import Model.PalletProduct;
import Model.Pallet_Product_Location;
import Model.PickingOrder;
import Model.PickingOrderDetail;
import Model.Product;
import Model.Rack;
import Model.RequestOrder;
import Model.RequestOrderDetail;
import Model.StateRequestOrder;
import Model.Warehouse;
import dao.DaoClient;
import dao.DaoDispatchOrder;
import dao.DaoDistributionCenter;
import dao.DaoDriver;
import dao.DaoLocationCell;
import dao.DaoLocationCellDetail;
import dao.DaoLog;
import dao.DaoPalletProduct;
import dao.DaoPallet_Product_Location;
import dao.DaoPickingOrder;
import dao.DaoPickingOrderDetail;
import dao.DaoProducts;
import dao.DaoRack;
import dao.DaoRequestOrder;
import dao.DaoStateRequestOrder;
import dao.DaoVehicle;
import dao.DaoVehicleState;
import dao.DaoWH;
import dao.impl.DaoClientImpl;
import dao.impl.DaoDispatchOrderImpl;
import dao.impl.DaoDistributionCenterImpl;
import dao.impl.DaoDriverImpl;
import dao.impl.DaoLocationCellDetailImpl;
import dao.impl.DaoLocationCellImpl;
import dao.impl.DaoLogImpl;
import dao.impl.DaoPalletProductImpl;
import dao.impl.DaoPallet_Producto_LocationImpl;
import dao.impl.DaoPickingOrderDetailImpl;
import dao.impl.DaoPickingOrderImpl;
import dao.impl.DaoProdImpl;
import dao.impl.DaoRackImpl;
import dao.impl.DaoRequestOrderImpl;
import dao.impl.DaoStateRequestOrderImpl;
import dao.impl.DaoVehicleImpl;
import dao.impl.DaoVehicleStateImpl;
import dao.impl.DaoWHImpl;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis Miguel
 */
public class Frm_DispatchOrder_Detail extends javax.swing.JFrame {
    Frm_DispatchOrder_Search frm_dosAux = new Frm_DispatchOrder_Search();
    DispatchOrder dispatchOrderAux = new DispatchOrder();
    DaoDispatchOrder daoDispatchOrder = new DaoDispatchOrderImpl();
    DaoPickingOrderDetail daoPickingOrderDetail = new DaoPickingOrderDetailImpl();
    DaoClient daoClient = new DaoClientImpl();
    DefaultTableModel model = new DefaultTableModel();
    DaoPalletProduct daoPalletProduct = new DaoPalletProductImpl();
    DaoPallet_Product_Location daoPalletProductLocation = new DaoPallet_Producto_LocationImpl();
    DaoProducts daoProduct = new DaoProdImpl();
    DaoLocationCell daoLocationCell = new DaoLocationCellImpl();
    DaoLocationCellDetail daoLocationCellDetail = new DaoLocationCellDetailImpl();
    DaoWH daoWH = new DaoWHImpl();
    DaoDistributionCenter daoDistribution = new DaoDistributionCenterImpl();
    DaoRack daoRack = new DaoRackImpl();
    DaoVehicle daoVehicle = new DaoVehicleImpl();
    DaoVehicleState daoVehicleState = new DaoVehicleStateImpl();
    DaoDriver daoDriver = new DaoDriverImpl();
    DaoRequestOrder daoRequestOrder = new DaoRequestOrderImpl();
    DaoPickingOrder daoPickingOrder = new DaoPickingOrderImpl();
    DaoStateRequestOrder daoStateRequestOrder = new DaoStateRequestOrderImpl();
    DaoLog daoLog = new DaoLogImpl();
    Log logSI = null;
    /**
     * Creates new form Frm_VerDetalleOrdenDespacho1
     */
    public Frm_DispatchOrder_Detail(Frm_DispatchOrder_Search frm_fds) {
        frm_dosAux = frm_fds;
        setTitle("ORDEN DE DESPACHO");
        initComponents();
    }
    
    public Frm_DispatchOrder_Detail() {
       
    }

    public Frm_DispatchOrder_Detail(Frm_DispatchOrder_Search frm_fds, DispatchOrder dispatchOrder) {
        frm_dosAux = frm_fds;
        setTitle("ORDEN DE DESPACHO");
        initComponents();
        dispatchOrderAux = dispatchOrder;
        model = (DefaultTableModel) table_products.getModel();
        fillData();
        blockObjects();
        
    }
    
    private void blockObjects(){
        if(dispatchOrderAux.getStatus()==1 || dispatchOrderAux.getStatus()==4){
            //no se puede cancelar ni confirmar
            btn_confirm.setEnabled(false);
            btn_delete.setEnabled(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_general_info = new javax.swing.JPanel();
        lbl_order_num = new javax.swing.JLabel();
        txt_OrderNum = new javax.swing.JTextField();
        lbl_client = new javax.swing.JLabel();
        txt_ClientId = new javax.swing.JTextField();
        txt_ClientName = new javax.swing.JTextField();
        lbl_deliver_date = new javax.swing.JLabel();
        lbl_status = new javax.swing.JLabel();
        cbo_status = new javax.swing.JComboBox();
        lbl_address = new javax.swing.JLabel();
        lbl_reg_date = new javax.swing.JLabel();
        jDate_RegisterDate = new com.toedter.calendar.JDateChooser();
        jDate_DeliverDate = new com.toedter.calendar.JDateChooser();
        txt_ClientAddress = new javax.swing.JTextField();
        lbl_dispatcher = new javax.swing.JLabel();
        txt_name_dispatcher = new javax.swing.JTextField();
        txt_id_dispatcher = new javax.swing.JTextField();
        lbl_vehicle = new javax.swing.JLabel();
        txt_license_plate = new javax.swing.JTextField();
        pnl_products = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_products = new javax.swing.JTable();
        btn_cancel = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_confirm = new javax.swing.JButton();
        btn_legend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnl_general_info.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Generales"));

        lbl_order_num.setText("Número de Orden: ");
        lbl_order_num.setToolTipText("");

        txt_OrderNum.setEditable(false);
        txt_OrderNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_OrderNumActionPerformed(evt);
            }
        });

        lbl_client.setText("Cliente: ");

        txt_ClientId.setEditable(false);

        txt_ClientName.setEditable(false);

        lbl_deliver_date.setText("Fecha Entrega Estimada:");

        lbl_status.setText("Estado:");

        cbo_status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Entregado", "Pendiente", "En vehiculo", "Cancelado" }));
        cbo_status.setEnabled(false);

        lbl_address.setText("Dirección:");

        lbl_reg_date.setText("Fecha Registro:");

        jDate_RegisterDate.setEnabled(false);

        jDate_DeliverDate.setEnabled(false);

        txt_ClientAddress.setEditable(false);

        lbl_dispatcher.setText("Transportista:");

        txt_name_dispatcher.setEditable(false);

        txt_id_dispatcher.setEditable(false);

        lbl_vehicle.setText("Vehículo:");

        txt_license_plate.setEditable(false);

        javax.swing.GroupLayout pnl_general_infoLayout = new javax.swing.GroupLayout(pnl_general_info);
        pnl_general_info.setLayout(pnl_general_infoLayout);
        pnl_general_infoLayout.setHorizontalGroup(
            pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_general_infoLayout.createSequentialGroup()
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_client)
                            .addComponent(lbl_order_num)
                            .addComponent(lbl_address)
                            .addComponent(lbl_vehicle)))
                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(lbl_reg_date)))
                .addGap(10, 10, 10)
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_general_infoLayout.createSequentialGroup()
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_ClientAddress)
                            .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_OrderNum, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                        .addComponent(txt_ClientId, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_ClientName, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(21, 21, 21)
                        .addComponent(lbl_status)
                        .addGap(214, 214, 214))
                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                .addComponent(jDate_RegisterDate, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lbl_deliver_date))
                                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                                        .addComponent(txt_license_plate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbl_dispatcher)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_id_dispatcher, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)))
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDate_DeliverDate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cbo_status, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_name_dispatcher, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(62, 62, 62))
        );
        pnl_general_infoLayout.setVerticalGroup(
            pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_general_infoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_OrderNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_status)
                    .addComponent(cbo_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_order_num))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_ClientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_ClientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_client))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_address)
                    .addComponent(txt_ClientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_general_infoLayout.createSequentialGroup()
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_vehicle)
                            .addComponent(txt_license_plate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_general_infoLayout.createSequentialGroup()
                        .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_dispatcher)
                            .addComponent(txt_id_dispatcher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_name_dispatcher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDate_RegisterDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_general_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbl_deliver_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDate_DeliverDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_reg_date))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_products.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos"));

        table_products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Pallet", "Descripción", "Estado"
            }
        ));
        jScrollPane3.setViewportView(table_products);

        btn_cancel.setText("Cancelar");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_delete.setText("Cancelar Despacho");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_confirm.setText("Confirmar Entrega");
        btn_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_confirmActionPerformed(evt);
            }
        });

        btn_legend.setText("Ver Leyenda");
        btn_legend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_legendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_productsLayout = new javax.swing.GroupLayout(pnl_products);
        pnl_products.setLayout(pnl_productsLayout);
        pnl_productsLayout.setHorizontalGroup(
            pnl_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_productsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(pnl_productsLayout.createSequentialGroup()
                        .addComponent(btn_legend, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_cancel)))
                .addContainerGap())
        );
        pnl_productsLayout.setVerticalGroup(
            pnl_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_productsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_productsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancel)
                    .addComponent(btn_delete)
                    .addComponent(btn_confirm)
                    .addComponent(btn_legend))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_products, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_general_info, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_general_info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_products, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_OrderNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_OrderNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_OrderNumActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        frm_dosAux.setVisible(true);
        frm_dosAux.setLocationRelativeTo(null);
        frm_dosAux.refreshGrid();
        this.dispose();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        frm_dosAux.setVisible(true);
        frm_dosAux.setLocationRelativeTo(null);
        frm_dosAux.refreshGrid();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void fillData(){
        if(dispatchOrderAux!=null){
           txt_OrderNum.setText(dispatchOrderAux.getIdDispatch_Order().toString());
           Client client = daoClient.clientGet(dispatchOrderAux.getIdClient());
           txt_ClientId.setText(client.getRuc());
           txt_ClientName.setText(client.getName());
           txt_ClientAddress.setText(client.getAddress());
           jDate_RegisterDate.setDate(dispatchOrderAux.getDepartureDate());
           jDate_DeliverDate.setDate(dispatchOrderAux.getArrivalDate());
           if(dispatchOrderAux.getStatus()==1)
               cbo_status.setSelectedIndex(1);
           else if(dispatchOrderAux.getStatus()==2)
               cbo_status.setSelectedIndex(2);
           else if (dispatchOrderAux.getStatus()==3)
               cbo_status.setSelectedIndex(3);
           else
               cbo_status.setSelectedIndex(4);
           if(dispatchOrderAux.getIdVehicle()!=null){
               txt_license_plate.setText(dispatchOrderAux.getIdVehicle().getLicense_plate());
               txt_id_dispatcher.setText(dispatchOrderAux.getIdVehicle().getDriver().getIdDriver().toString());
               txt_name_dispatcher.setText(dispatchOrderAux.getIdVehicle().getDriver().getName());
           }
           fillTable();
        }
    }
    
    private void fillTable(){
        refreshGrid();
        List<PickingOrderDetail> list = daoPickingOrderDetail.pickingOrderDetailQry(dispatchOrderAux.getIdPickingOrder());
        if(list!=null){
            int size = list.size();
            for(int i=0;i<size;i++){
                PickingOrderDetail poD = list.get(i);
                //EAN 128 - DESCRIPCION (PRODUCTO) - UBICACION - ESTADO - SELECCIONAR
                Pallet_Product_Location ppl = daoPalletProductLocation.daoPallet_Product_LocationGet(list.get(i).getIdPallet_By_Product_By_Location_Cell_Detail());
                List<PalletProduct> pp = daoPalletProduct.GetPalletProductList("WHERE Pallet_idPallet="+ppl.getPallet_By_Product_Pallet_idPallet());
                int sizepp = pp.size();
                String ean128 = null;
                String desc = null;
                for(int j=0;j<sizepp;j++){
                    
                    ean128 = pp.get(j).getCod_ean128();
                    Product prod = daoProduct.ProductsGet(pp.get(j).getIdproduct());
                    desc = prod.getName();
                }

                Integer idLocationCellDetail = ppl.getLocation_Cell_Detail_idLocation_Cell_Detail();

                Integer idLocationCell = ppl.getLocation_Cell_Detail_Location_Cell_idLocation_Cell();
                Integer idDist = ppl.getLocation_Cell_Detail_idDistribution_Center();
                Integer idWh = ppl.getLocation_Cell_Detail_Location_Cell_Rack_Warehouse_idWarehouse();
                Integer idRack = ppl.getLocation_Cell_Detail_Location_Cell_Rack_idRack();
                Rack rack = daoRack.rackGet(idRack);
                Warehouse wh = daoWH.whGet(idWh);
                LocationCell location = daoLocationCell.LocationCellGet(idDist, idWh, idRack, idLocationCell);
                LocationCellDetail cellDetail = daoLocationCellDetail.locationCellDetailQry(idLocationCellDetail,idLocationCell);
                String nameState = null;
                if(poD.getDispatchStatus()==1)
                    nameState = "Entregado";
                else if(poD.getDispatchStatus()==2)
                    nameState = "Por Entregar";
                else if(poD.getDispatchStatus()==3)
                    nameState = "Devuelto a Almacén";
                Object[] fila = {ean128,desc,nameState};
                model.addRow(fila);
            }
        }
    }
    
    private void btn_confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_confirmActionPerformed
        // TODO add your handling code here:
        Object[] options = {"OK"};
        if ( JOptionPane.showConfirmDialog(new JFrame(), "¿Desea realizar acción?",
            "Advertencias", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            /***********************************************************************/
            /*************VERIFICAMOS  SI HAY VEHICULO ASIGNADO*********************/
            if(dispatchOrderAux.getStatus()==2){ //en estado entregado
                int ok_option = JOptionPane.showOptionDialog(new JFrame(),"La orden aun no ha sido puesto en un vehiculo.","Mensaje",JOptionPane.PLAIN_MESSAGE,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            }else if(dispatchOrderAux.getStatus()==3){
                dispatchOrderAux.setStatus(1);
                daoDispatchOrder.dispatchOrderUpd(dispatchOrderAux);
                PickingOrder po = daoPickingOrder.pickingOrderGet(dispatchOrderAux.getIdPickingOrder());
               
                //setear los status por orden de picking detail
                List<PickingOrderDetail> list = daoPickingOrderDetail.pickingOrderDetailQry(po.getIdPickingOrder());
                int size = list.size();
                for(int i=0;i<size;i++){
                    daoPickingOrderDetail.pickingOrderDetailConfirmDespatch(list.get(i).getIdPicking_Order_Detail(),po.getIdPickingOrder());
                }
                RequestOrder ro = daoRequestOrder.requestOrderGet(po.getIdRequest_Order());
                updateRequestOrder(ro);
                daoLog.clientIns("Se ha confirmado la entrega N° :  " + dispatchOrderAux.getIdDispatch_Order(), Frm_DispatchOrder_Detail.class.toString(), logSI.getIduser());
                int ok_option = JOptionPane.showOptionDialog(new JFrame(),"El despacho ha finalizado con éxito.","Mensaje",JOptionPane.PLAIN_MESSAGE,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                if(ok_option==JOptionPane.OK_OPTION){
                    frm_dosAux.setVisible(true);
                    frm_dosAux.setLocationRelativeTo(null);
                    frm_dosAux.refreshGrid();
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_btn_confirmActionPerformed

    private void refreshGrid(){
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
    }
    
    private void updateRequestOrder(RequestOrder ro){
        //verificamos dos cosas:
        //1: con los despachos que ya se han hecho, ya se han entregado o cancelado
        List<RequestOrderDetail> list = ro.getRequestOrderDetailList();
        int size = list.size();
        boolean completed = true;
        for(int i=0;i<size;i++){
            if(list.get(i).getRemaining()!=0){
                completed =false;
                break;
            }    
        }
        
        //si el estado esta en true, quiere decir que se hizo picking de todo pero habran picking anulados
        //habran picking que aun no son despachos entregados
        if(completed == true){
           List<PickingOrder> listPos = daoPickingOrder.pickingOrderQry_search(ro.getIdRequestOrder());
           int pickingOrdersCount = listPos.size();
           System.out.println("size Picking: "+pickingOrdersCount);
           int dispatchOrdersCount = daoRequestOrder.getQuantityDispatchesDeliveredCanceled(ro.getIdRequestOrder());
           System.out.println("size Dispatch: "+dispatchOrdersCount);
           if(pickingOrdersCount == dispatchOrdersCount){
               StateRequestOrder state = daoStateRequestOrder.stateRequestOrderGet(1);
               ro.setStateRequestOrder(state);
               daoRequestOrder.requestOrderUpd(ro);
               Date dateArrival = new Date();
               ro.setDateArrive(dateArrival);
               daoRequestOrder.setDateArrivalToRequest(ro);
           }
        }
            
        
    }
    
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        Object[] options = {"OK"};
        if ( JOptionPane.showConfirmDialog(new JFrame(), "¿Desea realizar acción?", 
            "Advertencias", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) { 
            
            int ok_option = JOptionPane.showOptionDialog(new JFrame(),"Para cancelar un despacho, se deberá registrar una orden de devolución.","Mensaje",JOptionPane.PLAIN_MESSAGE,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
            if(ok_option == JOptionPane.OK_OPTION){
                Frm_ReturnProducts frm_rps = new Frm_ReturnProducts(this,dispatchOrderAux);
                frm_rps.setVisible(true);
                frm_rps.setLocationRelativeTo(null);
                this.setVisible(false);
            }
            
        } 
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_legendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_legendActionPerformed
        // TODO add your handling code here:
        Frm_Pallet_Legend frm_pl = new Frm_Pallet_Legend();
        frm_pl.setVisible(true);
        frm_pl.setLocationRelativeTo(null);
    }//GEN-LAST:event_btn_legendActionPerformed

    public void cancellOrder(int idDispatch){
        dispatchOrderAux = daoDispatchOrder.dispatchOrderGet(idDispatch);
        fillData();
        btn_confirm.setEnabled(false);
        btn_delete.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_confirm;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_legend;
    private javax.swing.JComboBox cbo_status;
    private com.toedter.calendar.JDateChooser jDate_DeliverDate;
    private com.toedter.calendar.JDateChooser jDate_RegisterDate;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_address;
    private javax.swing.JLabel lbl_client;
    private javax.swing.JLabel lbl_deliver_date;
    private javax.swing.JLabel lbl_dispatcher;
    private javax.swing.JLabel lbl_order_num;
    private javax.swing.JLabel lbl_reg_date;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JLabel lbl_vehicle;
    private javax.swing.JPanel pnl_general_info;
    private javax.swing.JPanel pnl_products;
    private javax.swing.JTable table_products;
    private javax.swing.JTextField txt_ClientAddress;
    private javax.swing.JTextField txt_ClientId;
    private javax.swing.JTextField txt_ClientName;
    private javax.swing.JTextField txt_OrderNum;
    private javax.swing.JTextField txt_id_dispatcher;
    private javax.swing.JTextField txt_license_plate;
    private javax.swing.JTextField txt_name_dispatcher;
    // End of variables declaration//GEN-END:variables
}
