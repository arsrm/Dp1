-- MySQL Script generated by MySQL Workbench
-- 06/09/15 12:28:39
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema wms
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `wms` ;

-- -----------------------------------------------------
-- Schema wms
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `wms` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `wms` ;

-- -----------------------------------------------------
-- Table `wms`.`Type_Condition`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Type_Condition` ;

CREATE TABLE IF NOT EXISTS `wms`.`Type_Condition` (
  `idType_Condition` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idType_Condition`))
ENGINE = InnoDB
COMMENT = 'Refrigerado\nNormal';


-- -----------------------------------------------------
-- Table `wms`.`Trademark`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Trademark` ;

CREATE TABLE IF NOT EXISTS `wms`.`Trademark` (
  `id_Trademark` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_Trademark`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Product` ;

CREATE TABLE IF NOT EXISTS `wms`.`Product` (
  `idProduct` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `quantity_per_box` INT NULL,
  `weight_per_box` INT NULL,
  `quantity_boxes_per_pallet` INT NULL,
  `physical_stock` INT NULL,
  `free_stock` INT NULL,
  `time_expiration` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Type_Condition_idType_Condition` INT(11) NOT NULL,
  `cod_ean13` VARCHAR(13) NULL,
  `Trademark_id_Trademark` INT NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idProduct`, `Trademark_id_Trademark`),
  INDEX `fk_Product_Type_Condition1_idx` (`Type_Condition_idType_Condition` ASC),
  INDEX `fk_Product_Trademark1_idx` (`Trademark_id_Trademark` ASC),
  CONSTRAINT `fk_Product_Type_Condition1`
    FOREIGN KEY (`Type_Condition_idType_Condition`)
    REFERENCES `wms`.`Type_Condition` (`idType_Condition`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Trademark1`
    FOREIGN KEY (`Trademark_id_Trademark`)
    REFERENCES `wms`.`Trademark` (`id_Trademark`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Distribution_Center`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Distribution_Center` ;

CREATE TABLE IF NOT EXISTS `wms`.`Distribution_Center` (
  `idDistribution_Center` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NULL,
  `address` VARCHAR(255) NULL,
  `pos_x` INT NULL,
  `pos_y` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idDistribution_Center`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Warehouse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Warehouse` ;

CREATE TABLE IF NOT EXISTS `wms`.`Warehouse` (
  `idWarehouse` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Type_Condition_idType_Condition` INT(11) NOT NULL COMMENT 'Se comparara con el mismo campo en la tabla Product',
  `Distribution_Center_idDistribution_Center` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idWarehouse`, `Distribution_Center_idDistribution_Center`),
  INDEX `fk_Warehouse_Type_Condition_WareHouse1_idx` (`Type_Condition_idType_Condition` ASC),
  INDEX `fk_Warehouse_Distribution_Center1_idx` (`Distribution_Center_idDistribution_Center` ASC),
  UNIQUE INDEX `description_UNIQUE` (`description` ASC),
  CONSTRAINT `fk_Warehouse_Type_Condition_WareHouse1`
    FOREIGN KEY (`Type_Condition_idType_Condition`)
    REFERENCES `wms`.`Type_Condition` (`idType_Condition`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Warehouse_Distribution_Center1`
    FOREIGN KEY (`Distribution_Center_idDistribution_Center`)
    REFERENCES `wms`.`Distribution_Center` (`idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Rack`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Rack` ;

CREATE TABLE IF NOT EXISTS `wms`.`Rack` (
  `idRack` INT(11) NOT NULL AUTO_INCREMENT,
  `identifier` VARCHAR(11) NULL,
  `description` VARCHAR(255) NULL,
  `length` DOUBLE NULL,
  `width` DOUBLE NULL,
  `floor_numbers` INT NULL,
  `height_per_floor` INT NULL,
  `resistance_weigth_per_floor` INT NULL,
  `column_number` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Warehouse_idWarehouse` INT(11) NOT NULL,
  `Warehouse_Distribution_Center_idDistribution_Center` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idRack`, `Warehouse_idWarehouse`, `Warehouse_Distribution_Center_idDistribution_Center`),
  INDEX `fk_Rack_Warehouse1_idx` (`Warehouse_idWarehouse` ASC, `Warehouse_Distribution_Center_idDistribution_Center` ASC),
  CONSTRAINT `fk_Rack_Warehouse1`
    FOREIGN KEY (`Warehouse_idWarehouse` , `Warehouse_Distribution_Center_idDistribution_Center`)
    REFERENCES `wms`.`Warehouse` (`idWarehouse` , `Distribution_Center_idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Location_State`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Location_State` ;

CREATE TABLE IF NOT EXISTS `wms`.`Location_State` (
  `idLocation_State` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idLocation_State`))
ENGINE = InnoDB
COMMENT = 'Disponble\nNo Disponible\nEn reparacion';


-- -----------------------------------------------------
-- Table `wms`.`Location_Cell`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Location_Cell` ;

CREATE TABLE IF NOT EXISTS `wms`.`Location_Cell` (
  `idLocation_Cell` INT(11) NOT NULL,
  `description` VARCHAR(255) NULL,
  `width` DOUBLE NULL,
  `length` DOUBLE NULL,
  `height` INT NULL,
  `row_cell` INT NULL,
  `column_cell` INT NULL,
  `status` INT NULL DEFAULT 1 COMMENT '1 habilitado\n0 deshabilitado',
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Location_State_idLocation_State` INT(11) NOT NULL,
  `Rack_idRack` INT(11) NOT NULL,
  `Rack_Warehouse_idWarehouse` INT(11) NOT NULL,
  `Rack_Warehouse_Distribution_Center_idDistribution_Center` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idLocation_Cell`, `Rack_idRack`, `Rack_Warehouse_idWarehouse`, `Rack_Warehouse_Distribution_Center_idDistribution_Center`),
  INDEX `fk_Location_Cell_Rack1_idx` (`Rack_idRack` ASC, `Rack_Warehouse_idWarehouse` ASC, `Rack_Warehouse_Distribution_Center_idDistribution_Center` ASC),
  INDEX `fk_Location_Cell_Location_State1_idx` (`Location_State_idLocation_State` ASC),
  CONSTRAINT `fk_Location_Cell_Rack1`
    FOREIGN KEY (`Rack_idRack` , `Rack_Warehouse_idWarehouse` , `Rack_Warehouse_Distribution_Center_idDistribution_Center`)
    REFERENCES `wms`.`Rack` (`idRack` , `Warehouse_idWarehouse` , `Warehouse_Distribution_Center_idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Location_Cell_Location_State1`
    FOREIGN KEY (`Location_State_idLocation_State`)
    REFERENCES `wms`.`Location_State` (`idLocation_State`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Profile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Profile` ;

CREATE TABLE IF NOT EXISTS `wms`.`Profile` (
  `idProfile` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NULL,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idProfile`))
ENGINE = InnoDB
COMMENT = 'Perfiles para agregar usuarios';


-- -----------------------------------------------------
-- Table `wms`.`Vehicle_State`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Vehicle_State` ;

CREATE TABLE IF NOT EXISTS `wms`.`Vehicle_State` (
  `idVehicle_State` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idVehicle_State`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Driver`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Driver` ;

CREATE TABLE IF NOT EXISTS `wms`.`Driver` (
  `idDriver` INT(8) NOT NULL,
  `name` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idDriver`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Vehicle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Vehicle` ;

CREATE TABLE IF NOT EXISTS `wms`.`Vehicle` (
  `idVehicle` INT(11) NOT NULL AUTO_INCREMENT,
  `license_plate` VARCHAR(16) NULL,
  `name` VARCHAR(128) NULL,
  `capacity` DOUBLE NULL,
  `dispatch_number` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL,
  `Vehicle_State_idVehicle_State` INT(11) NOT NULL,
  `Driver_idDriver` INT(8) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idVehicle`, `Vehicle_State_idVehicle_State`, `Driver_idDriver`),
  INDEX `fk_Vehicle_Vehicle_State1_idx` (`Vehicle_State_idVehicle_State` ASC),
  INDEX `fk_Vehicle_Driver1_idx` (`Driver_idDriver` ASC),
  UNIQUE INDEX `license_plate_UNIQUE` (`license_plate` ASC),
  CONSTRAINT `fk_Vehicle_Vehicle_State1`
    FOREIGN KEY (`Vehicle_State_idVehicle_State`)
    REFERENCES `wms`.`Vehicle_State` (`idVehicle_State`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vehicle_Driver1`
    FOREIGN KEY (`Driver_idDriver`)
    REFERENCES `wms`.`Driver` (`idDriver`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Numero de despachos que va el vehiculo';


-- -----------------------------------------------------
-- Table `wms`.`Client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Client` ;

CREATE TABLE IF NOT EXISTS `wms`.`Client` (
  `idClient` INT(11) NOT NULL AUTO_INCREMENT,
  `ruc` VARCHAR(11) NULL,
  `name` VARCHAR(128) NULL,
  `address` VARCHAR(255) NULL,
  `priority` INT NULL,
  `pos_x` INT NULL,
  `pos_y` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idClient`),
  UNIQUE INDEX `idClient_UNIQUE` (`idClient` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`User` ;

CREATE TABLE IF NOT EXISTS `wms`.`User` (
  `idUser` INT(8) NOT NULL,
  `name` VARCHAR(128) NULL,
  `password` VARCHAR(255) NULL,
  `password_change` INT NULL DEFAULT 1,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Profile_idProfile` INT(11) NOT NULL,
  `Distribution_Center_idDistribution_Center` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idUser`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`),
  INDEX `fk_User_Profile1_idx` (`Profile_idProfile` ASC),
  INDEX `fk_User_Distribution_Center1_idx` (`Distribution_Center_idDistribution_Center` ASC),
  CONSTRAINT `fk_User_Profile1`
    FOREIGN KEY (`Profile_idProfile`)
    REFERENCES `wms`.`Profile` (`idProfile`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_Distribution_Center1`
    FOREIGN KEY (`Distribution_Center_idDistribution_Center`)
    REFERENCES `wms`.`Distribution_Center` (`idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = '0 - Inactivo\n1 - Activo - Cambiar password por unica vez';


-- -----------------------------------------------------
-- Table `wms`.`Type_Movement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Type_Movement` ;

CREATE TABLE IF NOT EXISTS `wms`.`Type_Movement` (
  `idType_Movement` INT(11) NOT NULL,
  `idSubtype` INT(11) NOT NULL,
  `movimiento` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idType_Movement`, `idSubtype`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Movement`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Movement` ;

CREATE TABLE IF NOT EXISTS `wms`.`Movement` (
  `idMovement` INT NOT NULL AUTO_INCREMENT,
  `date` DATE NOT NULL,
  `Type_Movement_idType_Movement` INT(11) NOT NULL,
  `Type_Movement_idSubtype` INT(11) NOT NULL,
  `stock_initial` INT NULL,
  `stock_final` INT NULL,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Product_idProduct` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  `Warehouse_idWarehouse` INT(11) NOT NULL,
  `Warehouse_Distribution_Center_idDistribution_Center` INT(11) NOT NULL,
  PRIMARY KEY (`idMovement`, `Product_idProduct`, `Warehouse_idWarehouse`, `Warehouse_Distribution_Center_idDistribution_Center`),
  INDEX `fk_Movement_Type_Movement1_idx` (`Type_Movement_idType_Movement` ASC),
  INDEX `fk_Movement_Product1_idx` (`Product_idProduct` ASC),
  INDEX `fk_Movement_Warehouse1_idx` (`Warehouse_idWarehouse` ASC, `Warehouse_Distribution_Center_idDistribution_Center` ASC),
  CONSTRAINT `fk_Movement_Type_Movement1`
    FOREIGN KEY (`Type_Movement_idType_Movement`)
    REFERENCES `wms`.`Type_Movement` (`idType_Movement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Movement_Product1`
    FOREIGN KEY (`Product_idProduct`)
    REFERENCES `wms`.`Product` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Movement_Warehouse1`
    FOREIGN KEY (`Warehouse_idWarehouse` , `Warehouse_Distribution_Center_idDistribution_Center`)
    REFERENCES `wms`.`Warehouse` (`idWarehouse` , `Distribution_Center_idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`State_Request_Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`State_Request_Order` ;

CREATE TABLE IF NOT EXISTS `wms`.`State_Request_Order` (
  `idStateRequest_Order` INT(11) NOT NULL,
  `description` VARCHAR(45) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idStateRequest_Order`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Request_Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Request_Order` ;

CREATE TABLE IF NOT EXISTS `wms`.`Request_Order` (
  `idRequest_Order` INT(11) NOT NULL AUTO_INCREMENT,
  `dateArrive` DATE NULL,
  `dateline` DATE NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Client_idClient` INT(11) NOT NULL,
  `State_Request_Order_idStateRequest_Order` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idRequest_Order`),
  INDEX `fk_Request_Order_Client1_idx` (`Client_idClient` ASC),
  INDEX `fk_Request_Order_StateRequest_Order1_idx` (`State_Request_Order_idStateRequest_Order` ASC),
  CONSTRAINT `fk_Request_Order_Client1`
    FOREIGN KEY (`Client_idClient`)
    REFERENCES `wms`.`Client` (`idClient`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Request_Order_StateRequest_Order1`
    FOREIGN KEY (`State_Request_Order_idStateRequest_Order`)
    REFERENCES `wms`.`State_Request_Order` (`idStateRequest_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Pallet_State`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Pallet_State` ;

CREATE TABLE IF NOT EXISTS `wms`.`Pallet_State` (
  `idPallet_State` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idPallet_State`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Pallet`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Pallet` ;

CREATE TABLE IF NOT EXISTS `wms`.`Pallet` (
  `idPallet` INT(11) NOT NULL DEFAULT 1,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Pallet_State_idPallet_Type` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idPallet`),
  INDEX `fk_Pallet_Pallet_State_idx` (`Pallet_State_idPallet_Type` ASC),
  CONSTRAINT `fk_Pallet_Pallet_State`
    FOREIGN KEY (`Pallet_State_idPallet_Type`)
    REFERENCES `wms`.`Pallet_State` (`idPallet_State`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Picking_Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Picking_Order` ;

CREATE TABLE IF NOT EXISTS `wms`.`Picking_Order` (
  `idPicking_Order` INT(11) NOT NULL AUTO_INCREMENT,
  `Date` DATE NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  `Request_Order_idRequest_Order` INT(11) NOT NULL,
  PRIMARY KEY (`idPicking_Order`, `Request_Order_idRequest_Order`),
  INDEX `fk_Picking_Order_Request_Order1_idx` (`Request_Order_idRequest_Order` ASC),
  CONSTRAINT `fk_Picking_Order_Request_Order1`
    FOREIGN KEY (`Request_Order_idRequest_Order`)
    REFERENCES `wms`.`Request_Order` (`idRequest_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Dispatch_Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Dispatch_Order` ;

CREATE TABLE IF NOT EXISTS `wms`.`Dispatch_Order` (
  `idDispatch_Order` INT(11) NOT NULL AUTO_INCREMENT,
  `idClient` INT(11) NULL,
  `departure_date` DATETIME NULL,
  `arrival_date` DATETIME NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Picking_Order_idPicking_Order` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idDispatch_Order`, `Picking_Order_idPicking_Order`),
  INDEX `fk_Dispatch_Order_Picking_Order1_idx` (`Picking_Order_idPicking_Order` ASC),
  CONSTRAINT `fk_Dispatch_Order_Picking_Order1`
    FOREIGN KEY (`Picking_Order_idPicking_Order`)
    REFERENCES `wms`.`Picking_Order` (`idPicking_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Request_Order_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Request_Order_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Request_Order_Detail` (
  `idRequest_Order_Detail` INT(11) NOT NULL AUTO_INCREMENT,
  `quantity` INT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Request_Order_idRequest_Order` INT(11) NOT NULL,
  `Product_idProduct` INT(11) NOT NULL,
  `delivered` INT NULL,
  `remaining` INT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idRequest_Order_Detail`, `Request_Order_idRequest_Order`),
  INDEX `fk_Request_Order_Detail_Request_Order1_idx` (`Request_Order_idRequest_Order` ASC),
  INDEX `fk_Request_Order_Detail_Product1_idx` (`Product_idProduct` ASC),
  CONSTRAINT `fk_Request_Order_Detail_Request_Order1`
    FOREIGN KEY (`Request_Order_idRequest_Order`)
    REFERENCES `wms`.`Request_Order` (`idRequest_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Request_Order_Detail_Product1`
    FOREIGN KEY (`Product_idProduct`)
    REFERENCES `wms`.`Product` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Internment_Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Internment_Order` ;

CREATE TABLE IF NOT EXISTS `wms`.`Internment_Order` (
  `idInternment_Order` INT(11) NOT NULL,
  `date` DATE NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idInternment_Order`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Pallet_By_Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Pallet_By_Product` ;

CREATE TABLE IF NOT EXISTS `wms`.`Pallet_By_Product` (
  `Pallet_idPallet` INT(11) NOT NULL,
  `Product_Trademark_id_Trademark` INT NOT NULL,
  `Product_idProduct` INT(11) NOT NULL,
  `cod_ean128` VARCHAR(128) NULL,
  `status` INT NULL DEFAULT 1,
  `expiration_date` DATE NULL,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  `Internment_Order_idInternment_Order` INT(11) NOT NULL,
  PRIMARY KEY (`Pallet_idPallet`, `Product_Trademark_id_Trademark`, `Product_idProduct`, `Internment_Order_idInternment_Order`),
  INDEX `fk_Pallet_By_Product_Pallet1_idx` (`Pallet_idPallet` ASC),
  INDEX `fk_Pallet_By_Product_Product1_idx` (`Product_idProduct` ASC, `Product_Trademark_id_Trademark` ASC),
  INDEX `fk_Pallet_By_Product_Internment_Order1_idx` (`Internment_Order_idInternment_Order` ASC),
  CONSTRAINT `fk_Pallet_By_Product_Pallet1`
    FOREIGN KEY (`Pallet_idPallet`)
    REFERENCES `wms`.`Pallet` (`idPallet`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pallet_By_Product_Product1`
    FOREIGN KEY (`Product_idProduct` , `Product_Trademark_id_Trademark`)
    REFERENCES `wms`.`Product` (`idProduct` , `Trademark_id_Trademark`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pallet_By_Product_Internment_Order1`
    FOREIGN KEY (`Internment_Order_idInternment_Order`)
    REFERENCES `wms`.`Internment_Order` (`idInternment_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Location_Cell_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Location_Cell_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Location_Cell_Detail` (
  `idLocation_Cell_Detail` INT NOT NULL,
  `description` VARCHAR(255) NULL,
  `availability` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL,
  `Location_Cell_idLocation_Cell` INT(11) NOT NULL,
  `Location_Cell_Rack_idRack` INT(11) NOT NULL,
  `Location_Cell_Rack_Warehouse_idWarehouse` INT(11) NOT NULL,
  `idDistribution_Center` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idLocation_Cell_Detail`, `Location_Cell_idLocation_Cell`, `Location_Cell_Rack_idRack`, `Location_Cell_Rack_Warehouse_idWarehouse`, `idDistribution_Center`),
  INDEX `fk_Location_Cell_Detail_Location_Cell1_idx` (`Location_Cell_idLocation_Cell` ASC, `Location_Cell_Rack_idRack` ASC, `Location_Cell_Rack_Warehouse_idWarehouse` ASC, `idDistribution_Center` ASC),
  CONSTRAINT `fk_Location_Cell_Detail_Location_Cell1`
    FOREIGN KEY (`Location_Cell_idLocation_Cell` , `Location_Cell_Rack_idRack` , `Location_Cell_Rack_Warehouse_idWarehouse` , `idDistribution_Center`)
    REFERENCES `wms`.`Location_Cell` (`idLocation_Cell` , `Rack_idRack` , `Rack_Warehouse_idWarehouse` , `Rack_Warehouse_Distribution_Center_idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Pallet_By_Product_By_Location_Cell_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Pallet_By_Product_By_Location_Cell_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Pallet_By_Product_By_Location_Cell_Detail` (
  `idPallet_By_Product_By_Location_Cell_Detail` INT NOT NULL AUTO_INCREMENT,
  `Pallet_By_Product_Pallet_idPallet` INT(11) NOT NULL,
  `Pallet_By_Product_Product_Trademark_id_Trademark` INT NOT NULL,
  `Pallet_By_Product_Product_idProduct` INT(11) NOT NULL,
  `Location_Cell_Detail_idLocation_Cell_Detail` INT NOT NULL,
  `Location_Cell_Detail_Location_Cell_idLocation_Cell` INT(11) NOT NULL,
  `Location_Cell_Detail_Location_Cell_Rack_idRack` INT(11) NOT NULL,
  `Location_Cell_Detail_Location_Cell_Rack_Warehouse_idWarehouse` INT(11) NOT NULL,
  `Location_Cell_Detail_idDistribution_Center` INT(11) NOT NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL,
  `updated_at` TIMESTAMP NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idPallet_By_Product_By_Location_Cell_Detail`, `Pallet_By_Product_Pallet_idPallet`, `Pallet_By_Product_Product_Trademark_id_Trademark`, `Pallet_By_Product_Product_idProduct`, `Location_Cell_Detail_idLocation_Cell_Detail`, `Location_Cell_Detail_Location_Cell_idLocation_Cell`, `Location_Cell_Detail_Location_Cell_Rack_idRack`, `Location_Cell_Detail_Location_Cell_Rack_Warehouse_idWarehouse`, `Location_Cell_Detail_idDistribution_Center`),
  INDEX `fk_Pallet_By_Product_By_Location_Cell_Detail_Pallet_By_Prod_idx` (`Pallet_By_Product_Pallet_idPallet` ASC, `Pallet_By_Product_Product_Trademark_id_Trademark` ASC, `Pallet_By_Product_Product_idProduct` ASC),
  INDEX `fk_Pallet_By_Product_By_Location_Cell_Detail_Location_Cell__idx` (`Location_Cell_Detail_idLocation_Cell_Detail` ASC, `Location_Cell_Detail_Location_Cell_idLocation_Cell` ASC, `Location_Cell_Detail_Location_Cell_Rack_idRack` ASC, `Location_Cell_Detail_Location_Cell_Rack_Warehouse_idWarehouse` ASC, `Location_Cell_Detail_idDistribution_Center` ASC),
  CONSTRAINT `fk_Pallet_By_Product_By_Location_Cell_Detail_Pallet_By_Product1`
    FOREIGN KEY (`Pallet_By_Product_Pallet_idPallet` , `Pallet_By_Product_Product_Trademark_id_Trademark` , `Pallet_By_Product_Product_idProduct`)
    REFERENCES `wms`.`Pallet_By_Product` (`Pallet_idPallet` , `Product_Trademark_id_Trademark` , `Product_idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pallet_By_Product_By_Location_Cell_Detail_Location_Cell_De1`
    FOREIGN KEY (`Location_Cell_Detail_idLocation_Cell_Detail` , `Location_Cell_Detail_Location_Cell_idLocation_Cell` , `Location_Cell_Detail_Location_Cell_Rack_idRack` , `Location_Cell_Detail_Location_Cell_Rack_Warehouse_idWarehouse` , `Location_Cell_Detail_idDistribution_Center`)
    REFERENCES `wms`.`Location_Cell_Detail` (`idLocation_Cell_Detail` , `Location_Cell_idLocation_Cell` , `Location_Cell_Rack_idRack` , `Location_Cell_Rack_Warehouse_idWarehouse` , `idDistribution_Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Picking_Order_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Picking_Order_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Picking_Order_Detail` (
  `idPicking_Order_Detail` INT(11) NOT NULL AUTO_INCREMENT,
  `dispatchStatus` INT NULL DEFAULT 0,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL,
  `Picking_Order_idPicking_Order` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  `idPallet_By_Product_By_Location_Cell_Detail` INT NOT NULL,
  PRIMARY KEY (`idPicking_Order_Detail`, `Picking_Order_idPicking_Order`, `idPallet_By_Product_By_Location_Cell_Detail`),
  INDEX `fk_Picking_Order_Detail_Picking_Order1_idx` (`Picking_Order_idPicking_Order` ASC),
  INDEX `fk_Picking_Order_Detail_Pallet_By_Product_By_Location_Cell__idx` (`idPallet_By_Product_By_Location_Cell_Detail` ASC),
  CONSTRAINT `fk_Picking_Order_Detail_Picking_Order1`
    FOREIGN KEY (`Picking_Order_idPicking_Order`)
    REFERENCES `wms`.`Picking_Order` (`idPicking_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Picking_Order_Detail_Pallet_By_Product_By_Location_Cell_De1`
    FOREIGN KEY (`idPallet_By_Product_By_Location_Cell_Detail`)
    REFERENCES `wms`.`Pallet_By_Product_By_Location_Cell_Detail` (`idPallet_By_Product_By_Location_Cell_Detail`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Motive_Return`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Motive_Return` ;

CREATE TABLE IF NOT EXISTS `wms`.`Motive_Return` (
  `idMotive_Return` INT(11) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL,
  `status` INT NULL DEFAULT 1,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idMotive_Return`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Product_Return`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Product_Return` ;

CREATE TABLE IF NOT EXISTS `wms`.`Product_Return` (
  `idProduct_Return` INT NOT NULL AUTO_INCREMENT,
  `quantity` INT NULL,
  `status` INT NULL DEFAULT 1,
  `idDispatch_Order` INT NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Motive_Return_idMotive_Return` INT(11) NOT NULL,
  `Picking_Order_Detail_idPicking_Order_Detail` INT(11) NOT NULL,
  `Picking_Order_Detail_Picking_Order_idPicking_Order` INT(11) NOT NULL,
  `Picking_Order_Detail_Product_idProduct` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idProduct_Return`, `Picking_Order_Detail_idPicking_Order_Detail`, `Picking_Order_Detail_Picking_Order_idPicking_Order`, `Picking_Order_Detail_Product_idProduct`),
  INDEX `fk_Product_Return_Motive_Return1_idx` (`Motive_Return_idMotive_Return` ASC),
  INDEX `fk_Product_Return_Picking_Order_Detail1_idx` (`Picking_Order_Detail_idPicking_Order_Detail` ASC, `Picking_Order_Detail_Picking_Order_idPicking_Order` ASC, `Picking_Order_Detail_Product_idProduct` ASC),
  CONSTRAINT `fk_Product_Return_Motive_Return1`
    FOREIGN KEY (`Motive_Return_idMotive_Return`)
    REFERENCES `wms`.`Motive_Return` (`idMotive_Return`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Return_Picking_Order_Detail1`
    FOREIGN KEY (`Picking_Order_Detail_idPicking_Order_Detail` , `Picking_Order_Detail_Picking_Order_idPicking_Order`)
    REFERENCES `wms`.`Picking_Order_Detail` (`idPicking_Order_Detail` , `Picking_Order_idPicking_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Log_Security`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Log_Security` ;

CREATE TABLE IF NOT EXISTS `wms`.`Log_Security` (
  `idLog_security` INT(11) NOT NULL AUTO_INCREMENT,
  `date` DATETIME NULL,
  `action` VARCHAR(255) NULL,
  `User_idUser` INT(8) NOT NULL,
  `class` VARCHAR(255) NULL,
  `ip` VARCHAR(45) NULL,
  `mac_address` VARCHAR(45) NULL,
  PRIMARY KEY (`idLog_security`, `User_idUser`),
  INDEX `fk_Log_security_User1_idx` (`User_idUser` ASC),
  CONSTRAINT `fk_Log_security_User1`
    FOREIGN KEY (`User_idUser`)
    REFERENCES `wms`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Internment_Order_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Internment_Order_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Internment_Order_Detail` (
  `idInternment_Order_Detail` INT(11) NOT NULL,
  `quantity` INT NULL,
  `status` INT NULL DEFAULT 1,
  `expiration_date` DATE NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `Product_idProduct` INT(11) NOT NULL,
  `Internment_Order_idInternment_Order` INT(11) NOT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idInternment_Order_Detail`, `Product_idProduct`, `Internment_Order_idInternment_Order`),
  INDEX `fk_Internment_Order_Detail_Product1_idx` (`Product_idProduct` ASC),
  INDEX `fk_Internment_Order_Detail_Internment_Order1_idx` (`Internment_Order_idInternment_Order` ASC),
  CONSTRAINT `fk_Internment_Order_Detail_Product1`
    FOREIGN KEY (`Product_idProduct`)
    REFERENCES `wms`.`Product` (`idProduct`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Internment_Order_Detail_Internment_Order1`
    FOREIGN KEY (`Internment_Order_idInternment_Order`)
    REFERENCES `wms`.`Internment_Order` (`idInternment_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Windows`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Windows` ;

CREATE TABLE IF NOT EXISTS `wms`.`Windows` (
  `id_windows` VARCHAR(255) NOT NULL,
  `description` VARCHAR(255) NULL,
  `id_menu` INT NULL,
  PRIMARY KEY (`id_windows`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Profile_Windows`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Profile_Windows` ;

CREATE TABLE IF NOT EXISTS `wms`.`Profile_Windows` (
  `idProfile` INT(11) NOT NULL,
  `id_windows` VARCHAR(255) NOT NULL,
  `status` INT NULL DEFAULT 1,
  `user_created` INT(8) NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `user_updated` INT(8) NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`idProfile`, `id_windows`),
  INDEX `fk_Profile_Windows_Profile1_idx` (`idProfile` ASC),
  CONSTRAINT `fk_Profile_Windows_Windows1`
    FOREIGN KEY (`id_windows`)
    REFERENCES `wms`.`Windows` (`id_windows`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Profile_Windows_Profile1`
    FOREIGN KEY (`idProfile`)
    REFERENCES `wms`.`Profile` (`idProfile`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Virtual_Warehouse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Virtual_Warehouse` ;

CREATE TABLE IF NOT EXISTS `wms`.`Virtual_Warehouse` (
  `Internment_Order_Detail_Internment_Order_idInternment_Order` INT(11) NOT NULL,
  `Internment_Order_Detail_idInternment_Order_Detail` INT(11) NOT NULL,
  `Internment_Order_Detail_Product_idProduct` INT(11) NOT NULL,
  `quantity` INT NULL,
  `date` DATETIME NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`Internment_Order_Detail_Internment_Order_idInternment_Order`, `Internment_Order_Detail_idInternment_Order_Detail`, `Internment_Order_Detail_Product_idProduct`),
  INDEX `fk_Virtual_Warehouse_Internment_Order_Detail1_idx` (`Internment_Order_Detail_idInternment_Order_Detail` ASC, `Internment_Order_Detail_Product_idProduct` ASC, `Internment_Order_Detail_Internment_Order_idInternment_Order` ASC),
  CONSTRAINT `fk_Virtual_Warehouse_Internment_Order_Detail1`
    FOREIGN KEY (`Internment_Order_Detail_idInternment_Order_Detail` , `Internment_Order_Detail_Product_idProduct` , `Internment_Order_Detail_Internment_Order_idInternment_Order`)
    REFERENCES `wms`.`Internment_Order_Detail` (`idInternment_Order_Detail` , `Product_idProduct` , `Internment_Order_idInternment_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Execution_Algorithm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Execution_Algorithm` ;

CREATE TABLE IF NOT EXISTS `wms`.`Execution_Algorithm` (
  `idExecutionAlgorithm` INT NOT NULL AUTO_INCREMENT,
  `date` DATETIME NULL,
  `status` INT NULL DEFAULT 1,
  `function_value` DOUBLE NULL,
  `vehicles_number` INT NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`idExecutionAlgorithm`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wms`.`Execution_Detail`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wms`.`Execution_Detail` ;

CREATE TABLE IF NOT EXISTS `wms`.`Execution_Detail` (
  `Execution_Algorithm_idExecutionAlgorithm` INT NOT NULL,
  `Dispatch_Order_idDispatch_Order` INT(11) NOT NULL,
  `Dispatch_Order_Picking_Order_idPicking_Order` INT(11) NOT NULL,
  `Vehicle_idVehicle` INT(11) NOT NULL,
  `Vehicle_Vehicle_State_idVehicle_State` INT(11) NOT NULL,
  `Vehicle_Driver_idDriver` INT(8) NOT NULL,
  `route_order` INT NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  `user_created` INT(8) NULL,
  `user_updated` INT(8) NULL,
  PRIMARY KEY (`Execution_Algorithm_idExecutionAlgorithm`, `Dispatch_Order_idDispatch_Order`, `Dispatch_Order_Picking_Order_idPicking_Order`, `Vehicle_idVehicle`, `Vehicle_Vehicle_State_idVehicle_State`, `Vehicle_Driver_idDriver`),
  INDEX `fk_Execution_Detail_Dispatch_Order1_idx` (`Dispatch_Order_idDispatch_Order` ASC, `Dispatch_Order_Picking_Order_idPicking_Order` ASC),
  INDEX `fk_Execution_Detail_Vehicle1_idx` (`Vehicle_idVehicle` ASC, `Vehicle_Vehicle_State_idVehicle_State` ASC, `Vehicle_Driver_idDriver` ASC),
  INDEX `fk_Execution_Detail_Execution_Algorithm1_idx` (`Execution_Algorithm_idExecutionAlgorithm` ASC),
  CONSTRAINT `fk_Execution_Detail_Dispatch_Order1`
    FOREIGN KEY (`Dispatch_Order_idDispatch_Order` , `Dispatch_Order_Picking_Order_idPicking_Order`)
    REFERENCES `wms`.`Dispatch_Order` (`idDispatch_Order` , `Picking_Order_idPicking_Order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Execution_Detail_Vehicle1`
    FOREIGN KEY (`Vehicle_idVehicle` , `Vehicle_Vehicle_State_idVehicle_State` , `Vehicle_Driver_idDriver`)
    REFERENCES `wms`.`Vehicle` (`idVehicle` , `Vehicle_State_idVehicle_State` , `Driver_idDriver`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Execution_Detail_Execution_Algorithm1`
    FOREIGN KEY (`Execution_Algorithm_idExecutionAlgorithm`)
    REFERENCES `wms`.`Execution_Algorithm` (`idExecutionAlgorithm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `wms`;

DELIMITER $$

USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Type_Condition_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Type_Condition_BEFORE_INSERT` BEFORE INSERT ON `Type_Condition` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Type_Condition_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Type_Condition_BEFORE_UPDATE` BEFORE UPDATE ON `Type_Condition` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Product_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Product_BEFORE_INSERT` BEFORE INSERT ON `Product` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Product_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Product_BEFORE_UPDATE` BEFORE UPDATE ON `Product` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Distribution_Center_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Distribution_Center_BEFORE_INSERT` BEFORE INSERT ON `Distribution_Center` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Distribution_Center_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Distribution_Center_BEFORE_UPDATE` BEFORE UPDATE ON `Distribution_Center` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Warehouse_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Warehouse_BEFORE_INSERT` BEFORE INSERT ON `Warehouse` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Warehouse_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Warehouse_BEFORE_UPDATE` BEFORE UPDATE ON `Warehouse` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Rack_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Rack_BEFORE_INSERT` BEFORE INSERT ON `Rack` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Rack_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Rack_BEFORE_UPDATE` BEFORE UPDATE ON `Rack` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_State_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_State_BEFORE_INSERT` BEFORE INSERT ON `Location_State` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_State_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_State_BEFORE_UPDATE` BEFORE UPDATE ON `Location_State` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_Cell_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_Cell_BEFORE_INSERT` BEFORE INSERT ON `Location_Cell` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_Cell_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_Cell_BEFORE_UPDATE` BEFORE UPDATE ON `Location_Cell` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Profile_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Profile_BEFORE_INSERT` BEFORE INSERT ON `Profile` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Profile_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Profile_BEFORE_UPDATE` BEFORE UPDATE ON `Profile` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Vehicle_State_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Vehicle_State_BEFORE_INSERT` BEFORE INSERT ON `Vehicle_State` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Vehicle_State_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Vehicle_State_BEFORE_UPDATE` BEFORE UPDATE ON `Vehicle_State` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Driver_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Driver_BEFORE_INSERT` BEFORE INSERT ON `Driver` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Driver_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Driver_BEFORE_UPDATE` BEFORE UPDATE ON `Driver` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Vehicle_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Vehicle_BEFORE_INSERT` BEFORE INSERT ON `Vehicle` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Vehicle_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Vehicle_BEFORE_UPDATE` BEFORE UPDATE ON `Vehicle` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Client_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Client_BEFORE_INSERT` BEFORE INSERT ON `Client` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Client_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Client_BEFORE_UPDATE` BEFORE UPDATE ON `Client` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`User_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`User_BEFORE_INSERT` BEFORE INSERT ON `User` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`User_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`User_BEFORE_UPDATE` BEFORE UPDATE ON `User` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Type_Movement_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Type_Movement_BEFORE_INSERT` BEFORE INSERT ON `Type_Movement` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Type_Movement_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Type_Movement_BEFORE_UPDATE` BEFORE UPDATE ON `Type_Movement` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Movement_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Movement_BEFORE_INSERT` BEFORE INSERT ON `Movement` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Movement_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Movement_BEFORE_UPDATE` BEFORE UPDATE ON `Movement` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`State_Request_Order_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`State_Request_Order_BEFORE_INSERT` BEFORE INSERT ON `State_Request_Order` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`State_Request_Order_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`State_Request_Order_BEFORE_UPDATE` BEFORE UPDATE ON `State_Request_Order` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Request_Order_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Request_Order_BEFORE_INSERT` BEFORE INSERT ON `Request_Order` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Request_Order_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Request_Order_BEFORE_UPDATE` BEFORE UPDATE ON `Request_Order` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Pallet_State_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Pallet_State_BEFORE_INSERT` BEFORE INSERT ON `Pallet_State` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Pallet_State_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Pallet_State_BEFORE_UPDATE` BEFORE UPDATE ON `Pallet_State` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Pallet_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Pallet_BEFORE_INSERT` BEFORE INSERT ON `Pallet` FOR EACH ROW
BEGIN
DECLARE newid int;  
   
    SELECT (COALESCE(max(idPallet),0)  +1 ) INTO newid  FROM  Pallet;    
    
    SET NEW.idPallet=newid; 
	SET NEW.created_at=now();
    SET NEW.updated_at=now();
	SET NEW.status=1;
    
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Pallet_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Pallet_BEFORE_UPDATE` BEFORE UPDATE ON `Pallet` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Picking_Order_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Picking_Order_BEFORE_INSERT` BEFORE INSERT ON `Picking_Order` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Picking_Order_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Picking_Order_BEFORE_UPDATE` BEFORE UPDATE ON `Picking_Order` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Dispatch_Order_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Dispatch_Order_BEFORE_INSERT` BEFORE INSERT ON `Dispatch_Order` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Dispatch_Order_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Dispatch_Order_BEFORE_UPDATE` BEFORE UPDATE ON `Dispatch_Order` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Request_Order_Detail_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Request_Order_Detail_BEFORE_INSERT` BEFORE INSERT ON `Request_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Request_Order_Detail_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Request_Order_Detail_BEFORE_UPDATE` BEFORE UPDATE ON `Request_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Internment_Order_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Internment_Order_BEFORE_INSERT` BEFORE INSERT ON `Internment_Order` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Internment_Order_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Internment_Order_BEFORE_UPDATE` BEFORE UPDATE ON `Internment_Order` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_Cell_Detail_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_Cell_Detail_BEFORE_INSERT` BEFORE INSERT ON `Location_Cell_Detail` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Location_Cell_Detail_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Location_Cell_Detail_BEFORE_UPDATE` BEFORE UPDATE ON `Location_Cell_Detail` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Picking_Order_Detail_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Picking_Order_Detail_BEFORE_INSERT` BEFORE INSERT ON `Picking_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Picking_Order_Detail_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Picking_Order_Detail_BEFORE_UPDATE` BEFORE UPDATE ON `Picking_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Motive_Return_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Motive_Return_BEFORE_INSERT` BEFORE INSERT ON `Motive_Return` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Motive_Return_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Motive_Return_BEFORE_UPDATE` BEFORE UPDATE ON `Motive_Return` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Product_Return_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Product_Return_BEFORE_INSERT` BEFORE INSERT ON `Product_Return` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Product_Return_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Product_Return_BEFORE_UPDATE` BEFORE UPDATE ON `Product_Return` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Internment_Order_Detail_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Internment_Order_Detail_BEFORE_INSERT` BEFORE INSERT ON `Internment_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Internment_Order_Detail_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Internment_Order_Detail_BEFORE_UPDATE` BEFORE UPDATE ON `Internment_Order_Detail` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Profile_Windows_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Profile_Windows_BEFORE_INSERT` BEFORE INSERT ON `Profile_Windows` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Profile_Windows_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Profile_Windows_BEFORE_UPDATE` BEFORE UPDATE ON `Profile_Windows` FOR EACH ROW
BEGIN
	SET NEW.updated_at=now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Execution_Algorithm_BEFORE_INSERT` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Execution_Algorithm_BEFORE_INSERT` BEFORE INSERT ON `Execution_Algorithm` FOR EACH ROW
BEGIN
	SET NEW.created_at = now();
END
$$


USE `wms`$$
DROP TRIGGER IF EXISTS `wms`.`Execution_Algorithm_BEFORE_UPDATE` $$
USE `wms`$$
CREATE DEFINER = CURRENT_USER TRIGGER `wms`.`Execution_Algorithm_BEFORE_UPDATE` BEFORE UPDATE ON `Execution_Algorithm` FOR EACH ROW
BEGIN
	SET NEW.updated_at = now();
END
$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `wms`.`Type_Condition`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Type_Condition` (`idType_Condition`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'Condicion de prueba', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Trademark`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Trademark` (`id_Trademark`, `name`) VALUES (1, 'Marca 1');
INSERT INTO `wms`.`Trademark` (`id_Trademark`, `name`) VALUES (2, 'Marca 2');

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Product`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Product` (`idProduct`, `name`, `quantity_per_box`, `weight_per_box`, `quantity_boxes_per_pallet`, `physical_stock`, `free_stock`, `time_expiration`, `status`, `created_at`, `updated_at`, `Type_Condition_idType_Condition`, `cod_ean13`, `Trademark_id_Trademark`, `user_created`, `user_updated`) VALUES (1, 'Sublime', 24, 50, 200, 1000, 200, NULL, 1, NULL, NULL, 1, '0081500601005', 1, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Distribution_Center`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Distribution_Center` (`idDistribution_Center`, `name`, `address`, `pos_x`, `pos_y`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'PUCPWMS', 'Direccion', 0, 0, 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Warehouse`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Warehouse` (`idWarehouse`, `description`, `status`, `created_at`, `updated_at`, `Type_Condition_idType_Condition`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (1, 'WHSPUCP', 1, NULL, NULL, 1, 1, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Rack`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Rack` (`idRack`, `identifier`, `description`, `length`, `width`, `floor_numbers`, `height_per_floor`, `resistance_weigth_per_floor`, `column_number`, `status`, `created_at`, `updated_at`, `Warehouse_idWarehouse`, `Warehouse_Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (1, 'ABA0001', 'Rack de Prueba', 12, 12, 5, 5, 20, 3, 1, NULL, NULL, 1, 1, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Location_State`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Location_State` (`idLocation_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'Disponible', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Location_State` (`idLocation_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 'No Disponible', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Location_State` (`idLocation_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (3, 'En reparacion', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Profile`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Profile` (`idProfile`, `name`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'administrator', 'It is the system administrator profile', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Vehicle_State`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Vehicle_State` (`idVehicle_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'No Disponible', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Vehicle_State` (`idVehicle_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 'Disponible', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Client`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Client` (`idClient`, `ruc`, `name`, `address`, `priority`, `pos_x`, `pos_y`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, '20508565934', 'HIPERMERCADOS TOTTUS S.A', 'AV. ANGAMOS ESTE NRO. 1805 INT. P-10', 1, 5, 5, 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Client` (`idClient`, `ruc`, `name`, `address`, `priority`, `pos_x`, `pos_y`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, '20100070970 ', 'SUPERMERCADOS PERUANOS SOCIEDAD ANONIMA', 'CAL. MORELLI NRO. 181 INT. P-2', 1, 8, 2, 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`User`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (72299021, 'Luis Miranda', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (42103543, 'Ronald Zavala', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (44872634, 'Gustavo Coronado', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (46474578, 'Alejandro Rodriguez', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (49778049, 'Karina Chacon', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);
INSERT INTO `wms`.`User` (`idUser`, `name`, `password`, `password_change`, `status`, `created_at`, `updated_at`, `Profile_idProfile`, `Distribution_Center_idDistribution_Center`, `user_created`, `user_updated`) VALUES (45946510, 'Luigi Limaylla', '$2a$12$Z8kyoYj/BVeERiceNdWll.RFi42l/twQSCvJzdA5KzMpNXapKrXy6', 1, 1, NULL, NULL, 1, 1, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Type_Movement`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Type_Movement` (`idType_Movement`, `idSubtype`, `movimiento`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 1, 'Ingreso por Internamiento', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Type_Movement` (`idType_Movement`, `idSubtype`, `movimiento`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 2, 'Ingreso por Devolucion', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Type_Movement` (`idType_Movement`, `idSubtype`, `movimiento`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 1, 'Salida por Despacho', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Type_Movement` (`idType_Movement`, `idSubtype`, `movimiento`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 2, 'Salida por Devolucion', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`State_Request_Order`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`State_Request_Order` (`idStateRequest_Order`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'Atendido', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`State_Request_Order` (`idStateRequest_Order`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 'Pendiente', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`State_Request_Order` (`idStateRequest_Order`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (3, 'Cancelada', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Pallet_State`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Pallet_State` (`idPallet_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'No Disponible', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Pallet_State` (`idPallet_State`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (2, 'Disponible', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Motive_Return`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Motive_Return` (`idMotive_Return`, `description`, `status`, `created_at`, `updated_at`, `user_created`, `user_updated`) VALUES (1, 'Producto en mal estado', 1, NULL, NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Windows`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Centro_distribucion', 'Mantenimiento de Centro de distribución', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Usuario', 'Mantenimiento de Usuario', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Cliente', 'Mantenimiento de Cliente', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Producto', 'Mantenimiento de Productos', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Almacenes', 'Mantenimiento de Almacenes', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Racks', 'Mantenimiento de Racks', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Pallet', 'Mantenimiento de Pallets', 1);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_loadIntermentOrder', 'Operaciones-Carga de Ordenes de Internamiento', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_searchInternmentOrder', 'Operaciones-Ver Ordenes de Internamiento', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Movimiento_Interno', 'Operaciones-Movimiento Interno', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_loadRequestOrders', 'Operaciones-Carga de Ordenes de Pedido', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_RequestOrderSearch', 'Operaciones-Ver Ordenes de Pedido', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_PickingOrderSearch', 'Operaciones-Ver Ordenes de Entrega', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_GenerateDispatchOrders', 'Operaciones-Generar Ordenes de Despacho', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_DispatchOrderSearch', 'Operaciones-Ver Ordenes de Despacho', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_RegisterReturn', 'Operaciones-Registrar Devolución', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_ReturnSearch', 'Operaciones-Ver Devoluciones', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Carga_Datos', 'Operaciones-Carga Datos', 2);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Perfiles', 'Seguridad-Perfiles', 3);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Cambio_Contraseña', 'Seguridad-Cambio de Contraseña', 3);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_Internamiento', 'Reportes-Reporte de Internamiento', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Guia_Transportista', 'Reportes-Guia de Transportista', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_Despacho', 'Reportes-Reporte de Despacho', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_diferencia_Inventario', 'Reportes-Reporte de diferencia de Inventario', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_Kardex_segun_fecha', 'Reportes-Reporte de Kardex según Fecha', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_Stock_fecha', 'Reportes-Reporte de Stock a la Fecha', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_Reporte_Libre_disponibilidad', 'Reportes-Reporte de Libre disponibilidad', 4);
INSERT INTO `wms`.`Windows` (`id_windows`, `description`, `id_menu`) VALUES ('op_generator_simulation', 'Realizar Simulación', 4);

COMMIT;


-- -----------------------------------------------------
-- Data for table `wms`.`Profile_Windows`
-- -----------------------------------------------------
START TRANSACTION;
USE `wms`;
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Centro_distribucion', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Usuario', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Cliente', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Producto', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Almacenes', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Racks', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Pallet', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_loadIntermentOrder', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_searchInternmentOrder', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Movimiento_Interno', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_loadRequestOrders', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_RequestOrderSearch', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_PickingOrderSearch', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_GenerateDispatchOrders', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_DispatchOrderSearch', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_RegisterReturn', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_ReturnSearch', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Carga_Datos', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Perfiles', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Cambio_Contraseña', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_Internamiento', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Guia_Transportista', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_Despacho', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_diferencia_Inventario', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_Kardex_segun_fecha', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_Stock_fecha', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_Reporte_Libre_disponibilidad', 1, NULL, NULL, NULL, NULL);
INSERT INTO `wms`.`Profile_Windows` (`idProfile`, `id_windows`, `status`, `user_created`, `created_at`, `user_updated`, `updated_at`) VALUES (1, 'op_generator_simulation', 1, NULL, NULL, NULL, NULL);

COMMIT;

